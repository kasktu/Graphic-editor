!function(e){var t={};function s(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(i,n,function(t){return e[t]}.bind(null,n));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);var i,n=function(e,t,s,i){return new(s||(s=Promise))((function(n,o){function r(e){try{l(i.next(e))}catch(e){o(e)}}function h(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,h)}l((i=i.apply(e,t||[])).next())}))};class o{constructor(){}static getInstance(){return o.instance||(o.instance=new o),o.instance}registerFactory(e,t){r.register(e,t)}get(){return new Promise((e,t)=>{fetch(o._URL_,{method:"GET"}).then(t=>{const s=t.text();console.log("ApiService::get(): TEXT => "+s),e(s)}).catch(e=>t(e))})}store(e,t,s,i){return n(this,void 0,void 0,(function*(){if(!e||!i)return Promise.resolve({value:"-1",error:"MISSING PARAMETERS"});const n={method:"POST",body:JSON.stringify({cmd:"store",acc:e,fnm:t,dt:s,fig:r.arrayToJSON(i)}),headers:{"Content-Type":"application/json"}},h=new Request(o._URL_,n);return(yield fetch(h)).json()}))}list(e){return n(this,void 0,void 0,(function*(){if(!e)return Promise.resolve({value:"",dt:"",error:"NO ACCOUNT PROVIDED"});const t={method:"POST",body:JSON.stringify({cmd:"list",acc:e,dt:""}),headers:{"Content-Type":"application/json"}},s=new Request(o._URL_,t);return(yield fetch(s)).json()}))}load(e,t){return n(this,void 0,void 0,(function*(){if(!e||!t)return Promise.resolve([]);const s={method:"POST",body:JSON.stringify({cmd:"load",acc:e,fnm:t}),headers:{"Content-Type":"application/json"}},i=new Request(o._URL_,s);return(yield fetch(i)).json().then(e=>{if(e.error)return console.error("ApiService::load(): ERROR => "+e.error),[];console.info("ApiService::load(): READ => "+e.value);const t=[];return JSON.parse(e.value).figures.forEach(e=>{const s=r.fromJSON(e);s&&t.push(s)}),t})}))}}o._URL_="https://ungrid.unal.edu.co/ge";class r{static register(e,t){r.classMap.set(e,t)}static getFactory(e){return r.classMap.get(e)}static toJSON(e){let t=`{ "clazz": "${e.name}"`;return t+=', "object": '+JSON.stringify(e),t+=" }",t}static arrayToJSON(e){let t='{ "figures": [';return e.forEach((s,i)=>{t+=r.toJSON(s),i<e.length-1&&(t+=",")}),t+="] }",t}static fromJSON(e){const t=r.getFactory(e.clazz);if(console.log(e.clazz),t){return t.create(e.object)}alert(`ERROR => ${e.clazz} CLASS FACTORY NOT REGISTERED!`)}}r.classMap=new Map,function(e){e[e.ADD_FIGURE=0]="ADD_FIGURE",e[e.REM_FIGURE=1]="REM_FIGURE",e[e.SELECTION=2]="SELECTION",e[e.UN_SELECTION=3]="UN_SELECTION",e[e.SAVE=4]="SAVE",e[e.LOAD=5]="LOAD",e[e.GROUPED=6]="GROUPED",e[e.UNGRUPED=7]="UNGRUPED",e[e.RUN=8]="RUN",e[e.MOVE=9]="MOVE",e[e.COPY=10]="COPY"}(i||(i={}));var h,l,c=function(e,t,s,i){return new(s||(s=Promise))((function(n,o){function r(e){try{l(i.next(e))}catch(e){o(e)}}function h(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,h)}l((i=i.apply(e,t||[])).next())}))};class a{constructor(){this.listeners=[],this.figures=[],this.copiedfigure=[],this.name=null}copy(){this.figures.forEach(e=>{e.selected&&this.copiedfigure.push(e)}),this.notifyListeners(i.COPY)}notifyListeners(e){this.listeners.forEach(t=>t.onDrawingChange(e))}addListener(e){e&&this.listeners.push(e)}remListener(e){e&&(this.listeners=this.listeners.filter(t=>t!=e))}paint(e){console.log(this.figures),this.figures.forEach(t=>t.paint(e))}cut(){this.figures.forEach(e=>{e.selected&&this.remFigure(e)})}group(){let e;this.figures.forEach((t,s)=>{t.selected&&(console.log("figura n°"+s),e?(console.log("añadiendo figura al child"),e.addChild(t),console.log("quitando figura de figures"),this.remFigure(t)):e=t)}),e.getUnionBoundBox(),this.notifyListeners(i.GROUPED)}unGroup(){}move(){this.notifyListeners(i.MOVE)}run(){this.notifyListeners(i.RUN)}numSelected(){let e=0;return this.figures.forEach(t=>{t.select&&(e+=1)}),e}selectAll(){this.figures.forEach(e=>e.selected=!0),this.notifyListeners(i.SELECTION)}deselectAll(){this.figures.forEach(e=>e.selected=!1),this.notifyListeners(i.UN_SELECTION)}select(e,t){this.deselectAll();for(let s=this.figures.length-1;s>=0;s--){const i=this.figures[s];if(i.select(e,t),i.selected&&null==t)break}this.notifyListeners(i.SELECTION)}addFigure(e){this.figures.push(e),this.notifyListeners(i.ADD_FIGURE)}remFigure(e){let t=this.figures.filter(t=>t!=e);console.log(t),this.figures=t,this.notifyListeners(i.REM_FIGURE)}getControlPoint(e){let t;for(let s=this.figures.length-1;s>=0;s--){const i=this.figures[s];if(i.selected&&(t=i.getControlPoint(e),t))break}return t}getSelectedFigure(e){for(let t=this.figures.length-1;t>=0;t--){const s=this.figures[t];if(s.selected&&s.contains(e))return s}}getCopiedFigures(){let e=[];for(let t=this.copiedfigure.length-1;t>=0;t--){const s=this.copiedfigure[t];e.push(s)}return e}clear(){this.figures=[]}save(e,t,s){return c(this,void 0,void 0,(function*(){const n=o.getInstance(),r=yield n.store(e,t,s,this.figures);return r.error?(console.error("Drawing::save(): ERROR => "+r.error),!1):!!r.value&&(console.log("Drawing::save(): BYTES WRITTEN => "+r.value),this.notifyListeners(i.SAVE),!0)}))}list(e){return c(this,void 0,void 0,(function*(){const t=o.getInstance(),s=yield t.list(e);if(s.error&&console.error("Drawing::list(): ERROR => "+s.error),console.log("Result:"+s.value),s.value){const e=[];return JSON.parse(s.value).forEach(t=>{e.push(t)}),e}}))}open(e,t){return c(this,void 0,void 0,(function*(){const s=o.getInstance();return yield s.load(e,t).then(e=>(this.figures=e,this.notifyListeners(i.LOAD),this.figures.length>0)).catch(e=>(alert("Drawing::open(): ERROR => "+e.message),!1))}))}}!function(e){e[e.SET_TOOL=0]="SET_TOOL"}(h||(h={}));class u{onAppChange(e){e==h.SET_TOOL&&this.changeTool()}changeTool(e){let t=null;e?t=e:G.getActiveTool(),console.log(t),t.includes("LineCreationTool")?(this.disableTools(),G.setActiveTool(C),this.line.setAttribute("toggled","true")):t.includes("RectCreationTool")?(this.disableTools(),G.setActiveTool(R),this.rect.setAttribute("toggled","true")):t.includes("EllipseCreationTool")?(this.disableTools(),G.setActiveTool(P),this.elli.setAttribute("toggled","true")):t.includes("TextCreationTool")?(this.disableTools(),G.setActiveTool(N),this.text.setAttribute("toggled","true")):t.includes("SelectionTool")&&(this.disableTools(),G.setActiveTool(U),this.sele.setAttribute("toggled","true"))}onDrawingChange(e){if(e==i.RUN)this.openRecent.setAttribute("disabled","true"),this.group.setAttribute("disabled","true"),this.unGroup.setAttribute("disabled","true"),this.cut.setAttribute("disabled","true"),this.copy.setAttribute("disabled","true"),this.paste.setAttribute("disabled","true");else if(e===i.SELECTION){const e=G.numSelected();this.cut.removeAttribute("disabled"),this.copy.removeAttribute("disabled"),e>1?this.group.removeAttribute("disabled"):this.group.setAttribute("disabled","true")}else if(e==i.UN_SELECTION)this.cut.setAttribute("disabled","true"),this.copy.setAttribute("disabled","true"),this.group.setAttribute("disabled","true"),this.unGroup.setAttribute("disabled","true");else if(e==i.LOAD){this.openRecent.removeAttribute("disabled");var t=G.getDocumentName();this.doc1.innerHTML!=t&&(this.doc3.innerHTML=this.doc2.innerHTML,this.doc2.innerHTML=this.doc1.innerHTML,this.doc1.innerHTML=t)}else e==i.COPY?this.paste.removeAttribute("disabled"):(this.cut.setAttribute("disabled","true"),this.copy.setAttribute("disabled","true"),this.group.setAttribute("disabled","true"),this.unGroup.setAttribute("disabled","true"))}static getInstance(){return this}disableTools(){try{this.line.removeAttribute("toggled"),this.rect.removeAttribute("toggled"),this.elli.removeAttribute("toggled"),this.text.removeAttribute("toggled"),this.sele.removeAttribute("toggled")}catch(e){console.error(e)}}init(){this.app=M.getInstance(),this.app.addListener(this);const e=document.getElementById("new");e&&e.addEventListener("click",()=>G.clear()),this.open=document.getElementById("open"),this.open&&this.open.addEventListener("click",()=>G.open()),this.openRecent=document.getElementById("open-recent"),this.doc1=document.getElementById("Doc_1"),this.doc1&&this.doc1.addEventListener("click",()=>G.openDocument(this.doc1.innerHTML)),this.doc2=document.getElementById("Doc_2"),this.doc2&&this.doc2.addEventListener("click",()=>G.openDocument(this.doc2.innerHTML)),this.doc3=document.getElementById("Doc_3"),this.doc3&&this.doc3.addEventListener("click",()=>G.openDocument(this.doc3.innerHTML)),this.save=document.getElementById("save"),this.save&&this.save.addEventListener("click",()=>G.save()),this.saveas=document.getElementById("saveas"),this.saveas&&this.saveas.addEventListener("click",()=>G.saveas()),this.line=document.getElementById("line"),this.line&&this.line.addEventListener("click",()=>{this.changeTool("LineCreationTool")}),this.rect=document.getElementById("rect"),this.rect&&this.rect.addEventListener("click",()=>{this.changeTool("RectCreationTool")}),this.elli=document.getElementById("elli"),this.elli&&this.elli.addEventListener("click",()=>{this.changeTool("EllipseCreationTool")}),this.text=document.getElementById("text"),this.text&&this.text.addEventListener("click",()=>{this.changeTool("TextCreationTool")}),this.sele=document.getElementById("sele"),this.sele&&this.sele.addEventListener("click",()=>{this.changeTool("SelectionTool")}),this.test=document.getElementById("test"),this.test&&this.test.addEventListener("click",()=>G.testBackEnd()),this.list=document.getElementById("list"),this.list&&this.list.addEventListener("click",()=>G.list()),this.cut=document.getElementById("cut"),this.cut&&this.cut.addEventListener("click",()=>G.cut()),this.copy=document.getElementById("copy"),this.copy&&this.copy.addEventListener("click",()=>G.copy()),this.paste=document.getElementById("paste"),this.paste&&this.paste.addEventListener("click",()=>G.paste()),this.group=document.getElementById("group"),this.group&&this.group.addEventListener("click",()=>G.group()),this.unGroup=document.getElementById("ungroup"),this.unGroup&&this.unGroup.addEventListener("click",()=>G.ungroup()),this.line.setAttribute("toggled","true")}}!function(e){e[e.NORTH=0]="NORTH",e[e.NORTH_EAST=1]="NORTH_EAST",e[e.EAST=2]="EAST",e[e.SOUTH_EAST=3]="SOUTH_EAST",e[e.SOUTH=4]="SOUTH",e[e.SOUTH_WEST=5]="SOUTH_WEST",e[e.WEST=6]="WEST",e[e.NORTH_WEST=7]="NORTH_WEST"}(l||(l={}));class d{constructor(e){this.cardinal=e}paint(e,t){const s=this.getPosition(t);e.fillStyle=g.color,e.fillRect(s.x-d.HSIZE,s.y-d.HSIZE,2*d.HSIZE,2*d.HSIZE)}contains(e,t){const s=this.getPosition(t),i=s.x-d.HSIZE,n=s.x+d.HSIZE,o=s.y-d.HSIZE,r=s.y+d.HSIZE;return i<=e.offsetX&&e.offsetX<=n&&o<=e.offsetY&&e.offsetY<=r}getCursor(){switch(this.cardinal){case l.EAST:return"e-resize";case l.NORTH:return"n-resize";case l.NORTH_EAST:return"ne-resize";case l.NORTH_WEST:return"nw-resize";case l.SOUTH:return"s-resize";case l.SOUTH_EAST:return"se-resize";case l.SOUTH_WEST:return"sw-resize";case l.WEST:return"w-resize"}}move(e,t,s){switch(this.cardinal){case l.SOUTH:s.resize(0,t,!0,!0);break;case l.NORTH:s.resize(0,t,!0,!1);break;case l.EAST:s.resize(e,0,!0,!0);break;case l.WEST:s.resize(e,0,!1,!0);break;case l.SOUTH_EAST:s.resize(e,t,!0,!0);break;case l.SOUTH_WEST:s.resize(e,t,!1,!0);break;case l.NORTH_EAST:s.resize(e,t,!0,!1);break;case l.NORTH_WEST:s.resize(e,t,!1,!1)}}getPosition(e){let t=0,s=0;switch(this.cardinal){case l.SOUTH:t=e.x+e.w/2,s=e.y+e.h;break;case l.NORTH:t=e.x+e.w/2,s=e.y;break;case l.EAST:t=e.x+e.w,s=e.y+e.h/2;break;case l.WEST:t=e.x,s=e.y+e.h/2;break;case l.NORTH_EAST:t=e.x+e.w,s=e.y;break;case l.NORTH_WEST:t=e.x,s=e.y;break;case l.SOUTH_WEST:t=e.x,s=e.y+e.h;break;case l.SOUTH_EAST:t=e.x+e.w,s=e.y+e.h}return{x:t,y:s}}}d.HSIZE=4;class f{static colorAsString(e){return"rgba("+e.r+","+e.g+","+e.b+","+e.a/255+")"}}class g{constructor(e,t){this.position=e,this.size=t}paint(e){e.strokeStyle=g.color,e.beginPath(),e.rect(this.position.x,this.position.y,this.size.w,this.size.h),e.stroke()}get x(){return this.position.x}get y(){return this.position.y}get w(){return this.size.w}get h(){return this.size.h}select(e,t){return t?this.contained(e,t):this.contains(e)}contains(e){const t=this.x-d.HSIZE,s=this.x+this.w+d.HSIZE,i=this.y-d.HSIZE,n=this.y+this.h+d.HSIZE;return t<=e.offsetX&&e.offsetX<=s&&i<=e.offsetY&&e.offsetY<=n}move(e,t){this.position.x+=e,this.position.y+=t}moveTo(e,t){this.position.x=e,this.position.y=t}resize(e,t,s,i){s?this.size.w+=e:s||(this.position.x+=e,this.size.w-=e),i?this.size.h+=t:i||(this.position.y+=t,this.size.h-=t)}contained(e,t){var s,i,n,o;return e.clientX>t.clientX?(s=t.clientX,n=e.clientX):(s=e.clientX,n=t.clientX),e.clientY>t.clientY?(i=t.clientY,o=e.clientY):(i=e.clientY,o=t.clientY),s<this.x&&this.x+this.w<n&&i<this.y&&this.y+this.h<o}}g.color=f.colorAsString({r:28,g:116,b:232,a:255});class b{onMouseDown(e,t){this.evDown=e,this.startFeedback(e,t)}onMouseUp(e,t){this.evDown?(this.evUp=e,this.processMouseUp(t),this.evDown=null,this.endFeedback()):console.warn("Tool::onMouseUp() => OUT OF SEQUENCE")}paste(e){this.processMouseUp(e)}onMouseMove(e,t){this.evDown?(G.clearFeedbackContext(),this.showFeedback(G.getFeedbackContext(),e)):t?(G.clearFeedbackContext(),this.showFeedback(G.getFeedbackContext(),e,t)):G.setCursor(this.getCursor(e))}equal(e,t){return e.offsetX===t.offsetX&&e.offsetY===t.offsetY}startFeedback(e,t){const s=G.getFeedbackContext();s.strokeStyle=f.colorAsString({r:28,g:116,b:232,a:255}),s.fillStyle=f.colorAsString({r:28,g:116,b:232,a:100})}endFeedback(){G.clearFeedbackContext()}getCursor(e){return"default"}}class v extends b{processMouseUp(e){if("TextCreationTool"!=this.getName()&&this.equal(this.evDown,this.evUp))return;const t=this.createFigure(e);t?G.addFigure(t):console.error("FIGURE CREATION FAILED")}}class p{constructor(e,t,s){this.bbox=e,this.LineStyle=t,this.LineStroke=s,this.children=[],this._selected=!1,0===p.ctrlPoints.length&&this.addControlPoints()}getUnionBoundBox(){let e,t,s,i;this.bbox.w<0?(e=this.bbox.x+this.bbox.w,i=Math.abs(this.bbox.w)):(e=this.bbox.x,i=this.bbox.w),this.bbox.h<0?(t=this.bbox.y+this.bbox.h,s=Math.abs(this.bbox.h)):(t=this.bbox.y,s=this.bbox.h);let n=e,o=t,r=e+i,h=t+s;this.children.forEach(e=>{let t,s,i,l;e.bbox.w<0?(t=e.bbox.x+e.bbox.w,l=Math.abs(e.bbox.w)):(t=e.bbox.x,l=e.bbox.w),e.bbox.h<0?(s=e.bbox.y+e.bbox.h,i=Math.abs(e.bbox.h)):(s=e.bbox.y,i=e.bbox.h),t<n&&(n=t),s<o&&(o=s);let c=t+l,a=s+i;c>r&&(r=c),a>h&&(h=a),e.selected=!1}),this.gbbox=new g({x:n,y:o},{w:r-n,h:h-o}),p.ctrlPoints.forEach(e=>p.ctrlPoints.shift()),this.addControlPoints()}addChild(e){this.children.push(e)}flushChildren(e){this.children.forEach(t=>e.push(t)),this.children=[]}get selected(){return this._selected}set selected(e){this._selected=e}paint(e){this.doPaint(e),this.children.forEach(t=>t.paint(e)),this.selected&&(this.gbbox?(this.gbbox.paint(e),p.ctrlPoints.forEach(t=>t.paint(e,this.gbbox))):(this.bbox.paint(e),p.ctrlPoints.forEach(t=>t.paint(e,this.bbox))))}select(e,t){this.selected=this.bbox.select(e,t)}contains(e){return this.gbbox?this.gbbox.contains(e):this.bbox.contains(e)}getControlPoint(e){for(let t=0;t<p.ctrlPoints.length;t++){const s=p.ctrlPoints[t];if(s.contains(e,this.bbox))return s}}move(e,t){this.gbbox?(this.gbbox.move(e,t),this.bbox.move(e,t),this.children.forEach(s=>{s.bbox.move(e,t)})):this.bbox.move(e,t)}resize(e,t,s,i){this.gbbox?(this.gbbox.resize(e,t,s,i),this.bbox.resize(e,t,s,i),this.children.forEach(n=>{n.bbox.resize(e,t,s,i)})):this.bbox.resize(e,t,s,i)}get x(){return this.bbox.x}get y(){return this.bbox.y}get w(){return this.bbox.w}get h(){return this.bbox.h}toJSON(){return{bbox:this.bbox,LineStyle:this.LineStyle,LineStroke:this.LineStroke}}addControlPoints(){Object.keys(l).map(e=>{const t=Number(e);isNaN(t)||p.ctrlPoints.push(new d(t))})}}p.ctrlPoints=[];class E extends p{constructor(e,t,s,i,n){super(e,s,i),this.bbox=e,this.lineThickness=t,this.lineStyle=s,this.lineStroke=i,this.lineDash=n}}class w extends E{constructor(e,t,s,i,n){super(e,t,s,i,n)}get name(){return w.className}get _lineWidth(){return this.lineThickness}set _lineWidth(e){this.lineThickness=e}get _lineStyle(){return this._lineStyle}set _lineStyle(e){this._lineStyle=e}doPaint(e){e.strokeStyle=f.colorAsString(this.lineStroke),e.beginPath(),e.moveTo(this.bbox.x,this.bbox.y),e.lineTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),e.stroke()}}w.className="Line";o.getInstance().registerFactory(w.className,new class{create(e){return new w(new g({x:e.bbox.position.x,y:e.bbox.position.y},{w:e.bbox.size.w,h:e.bbox.size.h}),1,e.LineStyle,e.LineStroke,[])}});class x extends v{getName(){return"LineCreationTool"}showFeedback(e,t,s){s?(e.beginPath(),e.moveTo(t.offsetX,t.offsetY),e.lineTo(t.offsetX+s.h,t.offsetY+s.w),e.stroke()):(e.beginPath(),e.moveTo(this.evDown.offsetX,this.evDown.offsetY),e.lineTo(t.offsetX,t.offsetY),e.stroke())}createFigure(e){return new w(e?new g({x:this.evUp.offsetX,y:this.evUp.offsetY},{w:e.w,h:e.h}):new g({x:this.evDown.offsetX,y:this.evDown.offsetY},{w:this.evUp.clientX-this.evDown.clientX,h:this.evUp.clientY-this.evDown.clientY}),1,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},[])}}class m extends E{constructor(e,t,s,i,n,o){super(e,t,s,i,o),this.bbox=e,this.lineThickness=t,this.lineStyle=s,this.lineStroke=i,this.fillColor=n,this.lineDash=o,this._fill=!1}get fill(){return this._fill}set fill(e){this._fill=e}}class T extends m{constructor(e,t,s,i,n,o){super(e,t,s,i,n,o)}get name(){return T.className}get _lineWidth(){return this.lineThickness}set _lineWidth(e){this.lineThickness=e}get _lineStyle(){return this._lineStyle}set _lineStyle(e){this._lineStyle=e}doPaint(e){e.strokeStyle=f.colorAsString(this.lineStroke),e.lineWidth=this.lineThickness,e.beginPath(),e.setLineDash(this.lineDash),e.rect(this.bbox.x,this.bbox.y,this.bbox.w,this.bbox.h),e.stroke(),this._fill&&(e.fillStyle=f.colorAsString(this.fillColor),e.fill())}}T.className="Rectangle";o.getInstance().registerFactory(T.className,new class{create(e){return new T(new g({x:e.bbox.x,y:e.bbox.y},{w:e.bbox.w,h:e.bbox.h}),1,e.LineStyle,e.LineStroke,e.color,[])}});class y extends v{getName(){return"RectCreationTool"}showFeedback(e,t,s){s?(e.beginPath(),e.setLineDash([]),e.rect(t.offsetX,t.offsetY,t.offsetX+s.h,t.offsetY+s.w),e.stroke()):(e.beginPath(),e.setLineDash([]),e.rect(this.evDown.offsetX,this.evDown.offsetY,t.offsetX-this.evDown.offsetX,t.offsetY-this.evDown.offsetY),e.stroke())}createFigure(e){return new T(e?new g({x:this.evUp.offsetX,y:this.evUp.offsetY},{w:e.w,h:e.h}):new g({x:this.evDown.offsetX,y:this.evDown.offsetY},{w:this.evUp.clientX-this.evDown.clientX,h:this.evUp.clientY-this.evDown.clientY}),1,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},[])}}class S extends m{constructor(e,t,s,i,n,o){super(e,t,s,i,n,o)}get name(){return S.className}get _lineWidth(){return this.lineThickness}set _lineWidth(e){this.lineThickness=e}get _lineStyle(){return this._lineStyle}set _lineStyle(e){this._lineStyle=e}doPaint(e){e.strokeStyle=f.colorAsString(this.lineStroke),e.lineWidth=this.lineThickness,e.setLineDash(this.lineDash),e.beginPath(),e.ellipse(this.bbox.x+this.bbox.w/2,this.bbox.y+this.bbox.h/2,Math.abs(this.bbox.w/2),Math.abs(this.bbox.h/2),0,0,2*Math.PI),e.stroke(),this._fill&&(e.fillStyle=f.colorAsString(this.fillColor),e.fill())}}S.className="Ellipse";o.getInstance().registerFactory(S.className,new class{create(e){return new S(new g({x:e.bbox.x,y:e.bbox.y},{w:e.bbox.w,h:e.bbox.h}),1,e.LineStyle,e.LineStroke,e.color,[])}});class D extends v{getName(){return"EllipseCreationTool"}showFeedback(e,t){var s=t.offsetX-this.evDown.clientX,i=t.offsetY-this.evDown.offsetY;e.beginPath(),e.ellipse(this.evDown.offsetX+s/2,this.evDown.offsetY+i/2,Math.abs(s/2),Math.abs(i/2),0,0,2*Math.PI),e.stroke()}createFigure(e){if(e)return new S(new g({x:this.evUp.offsetX,y:this.evUp.offsetY},{w:e.w,h:e.h}),1,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},[]);var t=this.evUp.offsetY-this.evDown.offsetY,s=this.evUp.offsetX-this.evDown.offsetX;return new S(new g({x:this.evDown.offsetX,y:this.evDown.offsetY},{w:s,h:t}),1,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},[])}}class _ extends p{constructor(e,t,s,i){super(t,s,i),this.bbox=t,this.LineStyle=s,this.LineStroke=i,this._font="",this._text=this.text,this._selected=!1,this._text=e}get name(){return _.className}get font(){return this._font}set font(e){this._font=e}get selected(){return this._selected}set selected(e){this._selected=e}get text(){return this._text}set text(e){this._text=e}doPaint(e){e.font=this._font,e.fillStyle=f.colorAsString(this.LineStyle),e.fillText(this._text,this.bbox.x,this.bbox.y),this.selected&&this.bbox.paint(e),e.stroke()}}_.className="Text";o.getInstance().registerFactory(_.className,new class{create(e){return new _(e._text,new g({x:e.bbox.x,y:e.bbox.y},{w:e.bbox.w,h:e.bbox.h}),e.LineStyle,e.LineStroke)}});class A extends v{getName(){return"TextCreationTool"}showFeedback(e,t){e.fillText("Text",t.offsetX,t.offsetY)}createFigure(e){if(e)return new _(e.text,new g({x:this.evUp.offsetX,y:this.evUp.offsetY},{w:e.w,h:e.h}),{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255});{const e=prompt("Ingrese el texto");if(null!=e&&""!=e)return new _(e,new g({x:this.evUp.offsetX,y:this.evUp.offsetY},{w:this.evUp.clientX-this.evDown.clientX,h:this.evUp.clientY-this.evDown.clientY}),{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255})}}}class k extends b{getName(){return"SelectionTool"}getCursor(e){return this.fCtrlPoint=G.getControlPoint(e),this.fSelected=G.getSelectedFigure(e),this.fCtrlPoint?this.fCtrlPoint.getCursor():this.fSelected?"move":super.getCursor(e)}showFeedback(e,t){this.fCtrlPoint?this.moveControlPoint(t):this.fSelected?this.moveSelected(t):this.drawFeedback(e,t)}drawFeedback(e,t){e.beginPath(),e.rect(this.evDown.offsetX,this.evDown.offsetY,t.offsetX-this.evDown.offsetX,t.offsetY-this.evDown.offsetY),e.fill(),e.stroke()}processMouseUp(){this.fSelected||this.fCtrlPoint||(this.equal(this.evDown,this.evUp)?G.select(this.evUp):G.select(this.evDown,this.evUp)),this.cleanUp()}cleanUp(){this.fSelected=null,this.fCtrlPoint=null}moveSelected(e){this.fSelected.move(e.offsetX-this.evDown.offsetX,e.offsetY-this.evDown.offsetY),this.evDown=e,G.move()}moveControlPoint(e){this.fCtrlPoint.move(e.offsetX-this.evDown.offsetX,e.offsetY-this.evDown.offsetY,this.fSelected),this.evDown=e,G.move()}}class I{constructor(){this.menu=new u,this.canvas=new O,this.feedback=new F}paste(){G.getCopiedFigures().forEach(e=>{this.feedback.createFigure(e)})}onDrawingChange(e){this.canvas.repaint()}getActiveTool(){return this.feedback.getActiveTool()}init(){const e=M.getInstance();this.menu.init(),this.canvas.init(),this.feedback.init(),this.setActiveTool(C),e.addListener(this)}getContext(){return this.canvas.getContext()}getFeedback(){return this.feedback.getContext()}clearFeedback(){this.feedback.clear()}setCursor(e){this.feedback.setCursor(e)}setActiveTool(e){this.feedback.setActiveTool(e)}}class L{constructor(){this.htmlElement=document.createElement("canvas"),this.htmlElement.width=L.PAGE_WIDTH,this.htmlElement.height=L.PAGE_HEIGHT,this.htmlElement.style.position="absolute",this.htmlElement.style.left="0",this.htmlElement.style.top="28px",this.htmlElement.style.width=L.PAGE_WIDTH+"px",this.htmlElement.style.height=L.PAGE_HEIGHT+"px";const e=document.getElementById("content");e.style.position="fixed",e.style.left="0",e.style.top="0",e.style.width=L.PAGE_WIDTH+"px",e.style.height=L.PAGE_HEIGHT+"px",e.appendChild(this.htmlElement),this.ctx=this.htmlElement.getContext("2d")}getContext(){return this.ctx}get width(){return this.htmlElement.width}get height(){return this.htmlElement.height}}L.PAGE_WIDTH=2e3,L.PAGE_HEIGHT=2e3;class O extends L{constructor(){super()}onDrawingChange(e){e!=i.SAVE&&this.repaint()}init(){const e=M.getInstance();this.htmlElement.style.backgroundColor="#FAFAFA",e.addListener(this)}repaint(){this.drawGrid(this.ctx),M.getInstance().paint(this.ctx)}clear(e){e.fillStyle=this.htmlElement.style.backgroundColor,e.fillRect(0,0,this.width,this.height)}drawGrid(e){if(e){this.clear(e),e.lineWidth=1,e.strokeStyle=O.GRID_COLOR;const t=this.width/O.GRID_SIZE,s=this.height/O.GRID_SIZE;for(let s=1;s<t;s++)e.beginPath(),e.moveTo(s*O.GRID_SIZE,0),e.lineTo(s*O.GRID_SIZE,L.PAGE_HEIGHT),e.stroke();for(let t=1;t<s;t++)e.beginPath(),e.moveTo(0,t*O.GRID_SIZE),e.lineTo(L.PAGE_WIDTH,t*O.GRID_SIZE),e.stroke()}}}O.GRID_SIZE=100,O.GRID_COLOR="#DDD0DD";const C=0,R=1,P=2,N=3,U=4;class F extends L{constructor(){super(),this.create=!1,this.tools=[]}createFigure(e){this.figure=e,this.create=!0}getActiveTool(){return this.activeTool.getName.toString()}init(){this.buildTools(),this.htmlElement.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.htmlElement.addEventListener("mouseup",this.handleMouseUp.bind(this)),this.htmlElement.addEventListener("mouseup",this.pasteMouse.bind(this)),this.htmlElement.addEventListener("mousemove",this.handleMouseMove.bind(this)),window.addEventListener("keydown",this.handleKeyPressed.bind(this))}setActiveTool(e){console.log("TOOL => "+e),this.activeTool=this.tools[e],M.getInstance().setDocumentTitle("",this.activeTool.getName())}clear(){this.getContext();this.ctx.clearRect(0,0,this.width,this.height)}setCursor(e){this.htmlElement.style.cursor=e}buildTools(){this.tools[C]=new x,this.tools[R]=new y,this.tools[P]=new D,this.tools[N]=new A,this.tools[U]=new k}handleMouseDown(e){e.y>28&&this.activeTool.onMouseDown(e)}pasteMouse(e){e.y>28&&this.activeTool.onMouseMove(e,this.figure)}handleMouseUp(e){this.activeTool.onMouseUp(e)}handleMouseMove(e){this.activeTool.onMouseMove(e)}handleKeyPressed(e){console.log(e.code),e.ctrlKey?(e.preventDefault(),"KeyS"==e.code?G.save():"KeyH"==e.code&&G.group()):"KeyL"===e.code?this.setActiveTool(C):"KeyR"===e.code?this.setActiveTool(R):"KeyE"===e.code?this.setActiveTool(P):"KeyT"===e.code?this.setActiveTool(N):"KeyS"===e.code&&this.setActiveTool(U)}}var H=function(e,t,s,i){return new(s||(s=Promise))((function(n,o){function r(e){try{l(i.next(e))}catch(e){o(e)}}function h(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,h)}l((i=i.apply(e,t||[])).next())}))};class M{constructor(){this.listeners=[],this.drawing=new a,this.mainWindow=new I,this.title=document.title="Graphics Editor v0.14"}getCopiedFigures(){return this.drawing.getCopiedFigures()}notifyListeners(e){this.listeners.forEach(t=>t.onAppChange(e))}addListenerApp(e){e&&this.listeners.push(e)}remListener(e){e&&(this.listeners=this.listeners.filter(t=>t!=e))}getDocumentName(){return this.title}openDocument(e){this.drawing.open(M._MY_ID_,e),this.title=e}ungroup(){this.drawing.unGroup()}cut(){this.drawing.cut()}paste(){this.mainWindow.paste()}copy(){this.drawing.copy()}numSelected(){return this.drawing.numSelected()}onDrawingChange(e){e==i.LOAD?this.setDocumentTitle("",""):e!=i.SAVE&&this.setDocumentTitle("*","")}static getInstance(){return M.instance||(M.instance=new M),M.instance}run(){this.mainWindow.init(),this.drawing.run()}addListener(e){this.drawing.addListener(e)}paint(e){this.drawing.paint(e)}select(e,t){this.drawing.select(e,t)}move(){this.drawing.move()}addFigure(e){this.drawing.addFigure(e)}group(){this.drawing.group()}setActiveTool(e){this.mainWindow.setActiveTool(e),this.notifyListeners(h.SET_TOOL)}getActiveTool(){return this.mainWindow.getActiveTool()}setDocumentTitle(e,t){document.title=e+this.title+"-"+t}getGraphicsContext(){return this.mainWindow.getContext()}getFeedbackContext(){return this.mainWindow.getFeedback()}clearFeedbackContext(){this.mainWindow.clearFeedback()}setCursor(e){this.mainWindow.setCursor(e)}getControlPoint(e){return this.drawing.getControlPoint(e)}getSelectedFigure(e){return this.drawing.getSelectedFigure(e)}clear(){this.drawing.clear()}testBackEnd(){this.testServlet()}saveas(){return H(this,void 0,void 0,(function*(){this.title=prompt("Nombre del documento");var e=this.drawing.list(M._MY_ID_),t=!1,s=this.actualDate.toString();do{console.log(t),(yield e).forEach(e=>{e==this.title&&(t=!0)}),null==this.title?t=!1:t&&(this.title=prompt("Archivo Existente\nIngrese otro nombre"))}while(t);null!=this.title&&this.drawing.save(M._MY_ID_,this.title,s).then(e=>{e||console.error("App::save() => FAILED")})}))}save(){return H(this,void 0,void 0,(function*(){if("Graphics Editor v0.14"==this.title)this.saveas();else{var e=this.actualDate.toString();null!=this.title&&this.drawing.save(M._MY_ID_,this.title,e).then(e=>{e||console.error("App::save() => FAILED")})}}))}actualDate(){const e=Date.now();return new Date(e)}list(){return H(this,void 0,void 0,(function*(){return this.drawing.list(M._MY_ID_).then(e=>{if(e)return e;console.error("Drawing::list() => FAILED")})}))}open(){return H(this,void 0,void 0,(function*(){var e,t=this.list(),s=!0;this.title;do{var i="Lista de Documentos:";(yield t).forEach((e,t)=>{i+="\n"+t+" "+e}),e=prompt(i);var n=Number(e);(n!=(yield t).length||null==this.title)&&(s=!1)}while(s);do{(yield t).forEach((e,t)=>{t==n&&(this.title=e)})}while(s);this.drawing.open(M._MY_ID_,this.title),document.title=this.title}))}deselectAll(){this.drawing.deselectAll()}testServlet(){o.getInstance().get().then(e=>{alert("App::test(): GET => "+e)}).catch(e=>{alert("App::test(): ERROR => "+e.message)})}}M._MY_ID_="1007651264";const Y=M.getInstance();Y.run();var G=t.default=Y}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,