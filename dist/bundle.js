(()=>{"use strict";var t={d:(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n)};t.d({},{Z:()=>R});var n,e=function(){function t(){this.figures=[],this.modified=!1,this.name=null}return t.prototype.paint=function(t){this.figures.forEach((function(n){return n.paint(t)}))},t.prototype.addTestFigures=function(){},t.prototype.selectAll=function(){this.figures.forEach((function(t){return t.selected=!0}))},t.prototype.select=function(t,n){this.figures.forEach((function(e){return e.select(t,n)})),R.repaint()},t.prototype.addFigure=function(t){t.selected=!0,this.figures.push(t),R.repaint()},t}();!function(t){t[t.NORTH=0]="NORTH",t[t.NORTH_EAST=1]="NORTH_EAST",t[t.EAST=2]="EAST",t[t.SOUTH_EAST=3]="SOUTH_EAST",t[t.SOUTH=4]="SOUTH",t[t.SOUTH_WEST=5]="SOUTH_WEST",t[t.WEST=6]="WEST",t[t.NORTH_WEST=7]="NORTH_WEST"}(n||(n={}));var o,i=function(){function t(t,n){this.owner=t,this.cardinal=n}return t.prototype.paint=function(e){e.fillStyle=c.color;var o=0,i=0;this.cardinal===n.SOUTH&&(o=this.owner.x+this.owner.w/2,i=this.owner.y+this.owner.h),e.fillRect(o-t.HSIZE,i-t.HSIZE,2*t.HSIZE,2*t.HSIZE)},t.HSIZE=4,t}(),r=function(){function t(){}return t.colorAsString=function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a/255+")"},t}(),c=function(){function t(t,n){this.position=t,this.size=n,this.ctrlPoints=[],this.addControlPoints()}return t.prototype.paint=function(n){n.strokeStyle=t.color,n.beginPath(),n.rect(this.position.x,this.position.y,this.size.w,this.size.h),n.stroke(),this.ctrlPoints.forEach((function(t){return t.paint(n)}))},Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"w",{get:function(){return this.size.w},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"h",{get:function(){return this.size.h},enumerable:!1,configurable:!0}),t.prototype.select=function(t,n){return n?this.contained(t,n):this.contains(t)},t.prototype.addControlPoints=function(){var t=this;Object.keys(n).map((function(n){var e=Number(n);isNaN(e)||t.ctrlPoints.push(new i(t,e))}))},t.prototype.contains=function(t){var n=this.x,e=this.x+this.w,o=this.y,i=this.y+this.h;return n<t.clientX&&t.clientX<e&&o<t.clientY&&t.clientY<i},t.prototype.contained=function(t,n){return!1},t.color=r.colorAsString({r:28,g:116,b:232,a:255}),t}(),s=function(){function t(){}return t.prototype.onMouseDown=function(t){this.evDown=t},t.prototype.onMouseUp=function(t){this.evUp=t,this.processMouseUp()},t.prototype.equal=function(t,n){return t.clientX===n.clientX&&t.clientY===n.clientY},t}(),u=(o=function(t,n){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},o(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}o(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),l=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return u(n,t),n.prototype.processMouseUp=function(){var t=this.createFigure();t?R.addFigure(t):console.error("FIGURE CREATION FAILED")},n}(s),p=function(){function t(t,n,e){this.bbox=t,this.LineStyle=n,this.LineStroke=e,this._selected=!1}return Object.defineProperty(t.prototype,"selected",{get:function(){return this._selected},set:function(t){this._selected=t},enumerable:!1,configurable:!0}),t.prototype.paint=function(t){this.doPaint(t),this.selected&&this.bbox.paint(t)},t.prototype.select=function(t,n){this.selected=this.bbox.select(t,n)},t}(),h=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),f=function(t){function n(n,e,o,i,r){var c=t.call(this,n,o,i)||this;return c.bbox=n,c.lineThickness=e,c.lineStyle=o,c.lineStroke=i,c.lineDash=r,c}return h(n,t),n}(p),a=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),y=function(t){function n(n,e,o,i,r,c){var s=t.call(this,n,e,o,i,c)||this;return s.bbox=n,s.lineThickness=e,s.lineStyle=o,s.lineStroke=i,s.fillColor=r,s.lineDash=c,s._fill=!1,s}return a(n,t),Object.defineProperty(n.prototype,"fill",{get:function(){return this._fill},set:function(t){this._fill=t},enumerable:!1,configurable:!0}),n}(f),b=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),_=function(t){function n(n,e,o,i,r,c){return t.call(this,n,e,o,i,r,c)||this}return b(n,t),n.prototype.doPaint=function(t){t.strokeStyle=r.colorAsString(this.lineStroke),t.lineWidth=this.lineThickness,t.setLineDash(this.lineDash),t.beginPath(),t.ellipse(this.bbox.x,this.bbox.y,this.bbox.h,this.bbox.w,0,0,2*Math.PI),t.stroke(),this._fill&&(t.fillStyle=r.colorAsString(this.fillColor),t.fill())},n}(y),w=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),d=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return w(n,t),n.prototype.createFigure=function(){return new _(new c({x:this.evDown.clientX,y:this.evDown.clientY},{w:this.evUp.clientX-this.evDown.clientX,h:this.evUp.clientY-this.evDown.clientY}),1,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},[])},n}(l),O=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),g=function(t){function n(n,e,o,i,r,c){return t.call(this,n,e,o,i,r,c)||this}return O(n,t),n.prototype.doPaint=function(t){t.strokeStyle=r.colorAsString(this.lineStroke),t.lineWidth=this.lineThickness,t.beginPath(),t.setLineDash(this.lineDash),t.rect(this.bbox.x,this.bbox.y,this.bbox.w,this.bbox.h),t.stroke(),this._fill&&(t.fillStyle=r.colorAsString(this.fillColor),t.fill())},n}(y),v=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),E=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return v(n,t),n.prototype.createFigure=function(){return new g(new c({x:this.evDown.clientX,y:this.evDown.clientY},{w:this.evUp.clientX-this.evDown.clientX,h:this.evUp.clientY-this.evDown.clientY}),1,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},[])},n}(l),T=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),S=function(t){function n(n,e,o,i,r){return t.call(this,n,e,o,i,r)||this}return T(n,t),Object.defineProperty(n.prototype,"_lineWidth",{get:function(){return this.lineThickness},set:function(t){this.lineThickness=t},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"_lineStyle",{get:function(){return this._lineStyle},set:function(t){this._lineStyle=t},enumerable:!1,configurable:!0}),n.prototype.doPaint=function(t){t.strokeStyle=r.colorAsString(this.lineStroke),t.lineWidth=this.lineThickness,t.beginPath(),t.moveTo(this.bbox.x,this.bbox.y),t.lineTo(this.bbox.x+this.bbox.w,this.bbox.y+this.bbox.h),t.stroke()},n}(f),P=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),I=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return P(n,t),n.prototype.createFigure=function(){return new S(new c({x:this.evDown.clientX,y:this.evDown.clientY},{w:this.evUp.clientX-this.evDown.clientX,h:this.evUp.clientY-this.evDown.clientY}),1,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:255},[])},n}(l),x=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),A=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return x(n,t),n.prototype.processMouseUp=function(){this.equal(this.evDown,this.evUp)?R.select(this.evUp):R.select(this.evDown,this.evUp)},n}(s),j=function(){function t(){this.canvas=new m}return t.prototype.init=function(){this.canvas.init()},t.prototype.repaint=function(){this.canvas.repaint()},t}(),m=function(){function t(){this.tools=[],this.htmlElement=document.createElement("canvas"),document.body.appendChild(this.htmlElement),this.htmlElement.width=t.PAGE_WIDTH,this.htmlElement.height=t.PAGE_HEIGHT,this.htmlElement.style.backgroundColor="#FAFAFA",this.ctx=this.htmlElement.getContext("2d")}return t.prototype.init=function(){this.buildTools(),this.setActiveTool(t.ELLI_CREATION),window.addEventListener("mousedown",this.handleMouseDown.bind(this)),window.addEventListener("mouseup",this.handleMouseUp.bind(this))},t.prototype.setActiveTool=function(t){this.activeTool=this.tools[t]},t.prototype.getContext=function(){return this.ctx},Object.defineProperty(t.prototype,"width",{get:function(){return this.htmlElement.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.htmlElement.height},enumerable:!1,configurable:!0}),t.prototype.repaint=function(){this.drawGrid(this.ctx),D.getInstance().paint(this.ctx)},t.prototype.clear=function(t){t.fillStyle="#FAFAFA",t.fillRect(0,0,this.width,this.height)},t.prototype.drawGrid=function(n){if(n){this.clear(n),n.lineWidth=1,n.strokeStyle=t.GRID_COLOR;for(var e=this.width/t.GRID_SIZE,o=this.height/t.GRID_SIZE,i=1;i<e;i++)n.beginPath(),n.moveTo(i*t.GRID_SIZE,0),n.lineTo(i*t.GRID_SIZE,t.PAGE_HEIGHT),n.stroke();for(var r=1;r<o;r++)n.beginPath(),n.moveTo(0,r*t.GRID_SIZE),n.lineTo(t.PAGE_WIDTH,r*t.GRID_SIZE),n.stroke()}},t.prototype.buildTools=function(){this.tools[t.LINE_CREATION]=new I,this.tools[t.RECT_CREATION]=new E,this.tools[t.ELLI_CREATION]=new d,this.tools[t.SELECTION]=new A},t.prototype.handleMouseDown=function(t){this.activeTool.onMouseDown(t)},t.prototype.handleMouseUp=function(t){this.activeTool.onMouseUp(t)},t.LINE_CREATION=0,t.RECT_CREATION=1,t.ELLI_CREATION=2,t.TEXT_CREATION=3,t.SELECTION=4,t.PAGE_WIDTH=2e3,t.PAGE_HEIGHT=2e3,t.GRID_SIZE=100,t.GRID_COLOR="#DDD0DD",t}(),D=function(){function t(){this.drawing=new e,this.mainWindow=new j,document.title="Graphics Editor v0.6"}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.run=function(){this.drawing.addTestFigures(),this.mainWindow.init(),this.repaint()},t.prototype.repaint=function(){this.mainWindow.repaint()},t.prototype.paint=function(t){this.drawing.paint(t)},t.prototype.select=function(t,n){this.drawing.select(t,n)},t.prototype.addFigure=function(t){this.drawing.addFigure(t)},t}(),C=D.getInstance();C.run();const R=C})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,